buildscript {
	repositories {
		maven {
			name 'Quilt Releases'
			url 'https://maven.quiltmc.org/repository/release/'
		}
		maven {
			name "Fabric Repository"
			url 'https://maven.fabricmc.net'
		}
		mavenCentral()
	}
	dependencies {
		classpath "net.fabricmc.unpick:unpick:${project.unpick_version}"
		classpath "net.fabricmc.unpick:unpick-format-utils:${project.unpick_version}"
	}
}

plugins {
	id 'java' // for constants, packages, javadoc
	id 'maven-publish'
	id 'org.cadixdev.licenser' version '0.6.1'
	id "mappings-logic"
}

def USE_SNAPSHOT_HASHES = false

def minecraft_version = Constants.MINECRAFT_VERSION

def ENV = System.getenv()

version = Constants.MAPPINGS_VERSION

if (ENV.BRANCH_NAME) {
	def branch = ENV.BRANCH_NAME.substring(ENV.BRANCH_NAME.lastIndexOf('/') + 1)
	if (minecraft_version != branch) {
		throw new IllegalStateException("Branch name (${branch}) does not match the mc version (${minecraft_version})")
	}
}

repositories {
	mavenCentral()
	maven {
		name "Quilt Repositiory"
		url "https://maven.quiltmc.org/repository/release"
	}
	maven {
		name "Fabric Repository"
		url 'https://maven.fabricmc.net'
	}
	maven {
		name "Mojang"
		url 'https://libraries.minecraft.net/'
	}
	mavenLocal()
	if (USE_SNAPSHOT_HASHES) {
		maven {
			name "Quilt Snapshot Repositiory"
			url "https://maven.quiltmc.org/repository/snapshot"
		}
	}
}

configurations {
	enigmaRuntime
	javadocClasspath
	decompileClasspath
	unpick
	hashed
}

dependencies {
	enigmaRuntime "cuchaz:enigma-swing:${project.enigma_version}"
	enigmaRuntime "net.fabricmc:stitch:${project.stitch_version}"
	javadocClasspath "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
	javadocClasspath "org.jetbrains:annotations:${project.jetbrains_annotations_version}"
	javadocClasspath "com.google.code.findbugs:jsr305:3.0.2" // for some other jsr annotations
	decompileClasspath "net.fabricmc:cfr:${project.cfr_version}"
	unpick "net.fabricmc.unpick:unpick-cli:${project.unpick_version}"
	hashed "org.quiltmc:hashed:${minecraft_version}${USE_SNAPSHOT_HASHES ? "-SNAPSHOT" : ""}"
}

import org.objectweb.asm.ClassVisitor
import org.objectweb.asm.Opcodes
import org.quiltmc.draftsman.asm.visitor.DraftsmanClassVisitor
import quilt.internal.Constants
import quilt.internal.tasks.build.AddProposedFieldMappingsTask
import quilt.internal.tasks.build.MappingsV2JarTask
import quilt.internal.decompile.Decompilers
import quilt.internal.tasks.build.TransformJarClassesTask
import quilt.internal.tasks.mappings.EnigmaMappingsTask
import quilt.internal.tasks.unpick.UnpickJarTask
import quilt.internal.tasks.decompile.DecompileTask
import quilt.internal.util.MappingsJavadocProvider

clean.doFirst {
	delete mappings.fileConstants.tempDir, mappings.fileConstants.cacheFilesMinecraft
}

tasks.build.dependsOn "compressTiny", "tinyJar", "v2UnmergedMappingsJar", "v2MergedMappingsJar"

task buildTinyWithEnum(dependsOn: "mergeTiny", type: AddProposedFieldMappingsTask) {
	inputJar.set mergeJars.mergedFile
	inputMappings.set mergeTiny.outputMappings
}

task insertAutoGeneratedEnumMappings(dependsOn: [buildMappingsTiny, downloadPerVersionMappings], type: AddProposedFieldMappingsTask) {
	inputJar.set mappings.fileConstants.perVersionMappingsJar
	inputMappings.set buildMappingsTiny.outputMappings
}

combineUnpickDefinitions {
	input = file('unpick-definitions')
	output = new File(mappings.fileConstants.tempDir, 'definitions.unpick')
}

remapUnpickDefinitions {
	dependsOn buildTinyWithEnum
	output = new File(project.extensions.getByName("mappings").fileConstants.tempDir as File, Constants.PER_VERSION_MAPPINGS_NAME + '-definitions.unpick')
	mappings = buildTinyWithEnum.outputMappings
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = "UTF-8"
	it.options.release = 17
}

sourceSets {
	constants
	packageDocs // package info files
	doclet
}

license {
	header file("HEADER")
	include '**/*.java'
}

task constantsJar(type: Jar) {
	from sourceSets.constants.output
	archiveClassifier = "constants"
}

task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier = "sources"
	from sourceSets.constants.allSource
}

task unpickHashedJar(type: UnpickJarTask) {
	inputFile.set mappings.fileConstants.perVersionMappingsJar
	outputFile.set mappings.fileConstants.unpickedJar
	unpickDefinition.set remapUnpickDefinitions.output.get()
	unpickConstantsJar.set constantsJar.archiveFile
}

task mappingsUnpicked(type: EnigmaMappingsTask, dependsOn: unpickHashedJar) {
	jarToMap.set unpickHashedJar.outputFile.get()
}

task mappings(type: EnigmaMappingsTask, dependsOn: "mapPerVersionMappingsJar") {
	jarToMap.set mappings.fileConstants.perVersionMappingsJar
}

// Only build jars for package infos if we need to actually expose stuff like annotation in the future.

build.dependsOn constantsJar, generatePackageInfoMappings

task v2UnmergedMappingsJar(type: MappingsV2JarTask, dependsOn: [insertAutoGeneratedEnumMappings, combineUnpickDefinitions]) {
	archiveFileName = "${Constants.MAPPINGS_NAME}-${Constants.MAPPINGS_VERSION}-v2.jar"
	mappings = insertAutoGeneratedEnumMappings.outputMappings
}

task v2MergedMappingsJar(dependsOn: ["mergeTinyV2"], type: MappingsV2JarTask) {
	archiveFileName = "${Constants.MAPPINGS_NAME}-${Constants.MAPPINGS_VERSION}-mergedv2.jar"
	mappings = mergeTinyV2.outputMappings
}

task eraseBytecode(type: TransformJarClassesTask, dependsOn: mapNamedJar) {
	jarFile = mappings.fileConstants.namedJar
	output = file(".gradle/temp/erased-classes/")
	visitor(DraftsmanClassVisitor::new)
	// Set protected/package-private classes to public so that we don't have any access compile errors.
	visitor { new ClassVisitor(Opcodes.ASM9, it) {
		private int toPublicAccess(int access) {
			if ((access & Opcodes.ACC_PROTECTED) != 0 || ((access & Opcodes.ACC_PRIVATE) == 0 && (access & Opcodes.ACC_PUBLIC) == 0)) {
				access = access & ~Opcodes.ACC_PROTECTED
				access = access | Opcodes.ACC_PUBLIC
			}
			return access
		}

		@Override
		void visit(int version, int access, String name, String signature, String superName, String[] interfaces) {
			super.visit(version, toPublicAccess(access), name, signature, superName, interfaces)
		}

		@Override
		void visitInnerClass(String name, String outerName, String innerName, int access) {
			super.visitInnerClass(name, outerName, innerName, toPublicAccess(access))
		}
	} }
}

task zipErasedBytecode(type: Zip, dependsOn: eraseBytecode) {
	from eraseBytecode.output
	archiveName = "erased-classes.jar"
	destinationDirectory = mappings.fileConstants.tempDir
}

def fakeSourceDir = file(".gradle/temp/fakeSource")
task genFakeSource(type: DecompileTask, dependsOn: [mergeTinyV2, zipErasedBytecode]) {
	input = zipErasedBytecode.outputs.getFiles().getSingleFile()
	output = fakeSourceDir
	decompiler = Decompilers.QUILTFLOWER
	libraries = files(mappings.fileConstants.libraries)
	decompilerOptions = [
			"rsy": "1", // remove synthetics
			"dgs": "1", // decompile generic signatures
			"pll": "99999" // pll (Preferred Line Length) is length for line wrapping
	]

	doFirst {
		fakeSourceDir.deleteDir()

		def jdProvider = new MappingsJavadocProvider(mergeTinyV2.outputMappings, "named")
		classJavadocProvider(jdProvider)
		fieldJavadocProvider(jdProvider)
		methodJavadocProvider(jdProvider)
		logger.lifecycle ":Fake source generated"
	}
}

task decompileCFR(type: DecompileTask, dependsOn: [mapNamedJar]) {
	input.set mappings.fileConstants.namedJar
	output.set file("namedSrc")
	decompiler = Decompilers.CFR
	libraries = configurations.decompileClasspath

	doFirst {
		file("namedSrc").deleteDir()
	}
}

task decompileQuiltflower(type: DecompileTask, dependsOn: [mapNamedJar]) {
	input.set mappings.fileConstants.namedJar
	output.set file("namedSrc")
	decompiler = Decompilers.QUILTFLOWER
	libraries = configurations.decompileClasspath

	doFirst {
		file("namedSrc").deleteDir()
	}
}

javadoc {
	dependsOn genFakeSource
	dependsOn downloadMinecraftLibraries
	dependsOn docletClasses // Needed for javadoc to find the doclet classes.
	group = "javadoc generation"
	outputs.upToDateWhen { false }

	def docletResources = sourceSets.doclet.resources.asFileTree

	failOnError = false
	maxMemory = '2G'

	// verbose = true // enable to debug
	options {
		// verbose() // enable to debug
		source = "17"
		encoding = 'UTF-8'
		charSet = 'UTF-8'
		memberLevel = JavadocMemberLevel.PRIVATE
		splitIndex true
		tags(
				'apiNote:a:API Note:',
				'implSpec:a:Implementation Requirements:',
				'implNote:a:Implementation Note:'
		)
		taglets "quilt.internal.taglet.MappingTaglet"
		// taglet path, header, extra stylesheet settings deferred
		it.use()

		addBooleanOption "-allow-script-in-comments", true
		links(
				'https://guava.dev/releases/21.0/api/docs/',
				'https://www.javadoc.io/doc/com.google.code.gson/gson/2.8.0/',
				'https://logging.apache.org/log4j/2.x/log4j-api/apidocs/',
				"https://javadoc.io/doc/org.jetbrains/annotations/${project.jetbrains_annotations_version}/",
				'https://www.javadoc.io/doc/com.google.code.findbugs/jsr305/3.0.2/',
				'https://javadoc.lwjgl.org/',
				'https://fastutil.di.unimi.it/docs/',
				'https://netty.io/4.1/api/',
				'https://commons.apache.org/proper/commons-logging/javadocs/api-1.1.3/',
				'https://commons.apache.org/proper/commons-lang/javadocs/api-3.5',
				'https://commons.apache.org/proper/commons-io/javadocs/api-2.5',
				'https://commons.apache.org/proper/commons-codec/archives/1.10/apidocs',
				'https://commons.apache.org/proper/commons-compress/javadocs/api-1.8.1/',
				"https://maven.fabricmc.net/docs/fabric-loader-${project.fabric_loader_version}/",
				"https://docs.oracle.com/en/java/javase/17/docs/api/"
		)
		// https://docs.oracle.com/en/java/javase/17/docs/specs/man/javadoc.html#additional-options-provided-by-the-standard-doclet
		addBooleanOption 'Xdoclint:html', true
		addBooleanOption 'Xdoclint:syntax', true
		addBooleanOption 'Xdoclint:reference', true
		addBooleanOption 'Xdoclint:accessibility', true
	}
	source fileTree(fakeSourceDir) + sourceSets.constants.allJava + sourceSets.packageDocs.allJava
	classpath = configurations.javadocClasspath.plus downloadMinecraftLibraries.outputs.files.asFileTree

	doLast {
		project.copy {
			from docletResources
			include "copy_on_click.js"
			into javadoc.outputDirectory
		}
	}

	doFirst {
		// lazy setting
		options {
			tagletPath sourceSets.doclet.output.classesDirs.files.toList()
			header docletResources.filter { it.name == 'javadoc_header.txt' }.singleFile.text.trim()
			addFileOption "-add-stylesheet", docletResources.filter { it.name == 'style.css' }.singleFile
		}
	}
}

task javadocJar(type: Jar, dependsOn: ["javadoc"]) {
	group = "javadoc generation"

	from javadoc.destinationDir

	archiveVersion.set Constants.MAPPINGS_VERSION
	archiveClassifier = 'javadoc'
}

generatePackageInfoMappings {
	packageName = "net/minecraft/unused/packageinfo/"
}

mappingLint {
	dependsOn mapPerVersionMappingsJar
	mappingDirectory = file("mappings")
	jarFile = mappings.fileConstants.perVersionMappingsJar
}

check.dependsOn mappingLint

publishing {
	publications {
		maven(MavenPublication) {
			groupId 'org.quiltmc'
			artifactId Constants.MAPPINGS_NAME
			version Constants.MAPPINGS_VERSION

			artifact(compressTiny.compressedTiny) {
				classifier "tiny"
				builtBy compressTiny
			}
			artifact(tinyJar)
			artifact(v2UnmergedMappingsJar) {
				classifier "v2"
			}
			artifact(v2MergedMappingsJar) {
				classifier "mergedv2"
			}
			artifact(constantsJar) {
				classifier "constants"
			}
			artifact sourcesJar
			artifact javadocJar

			pom.withXml {
				def hashedDep = it.asNode().appendNode('dependencies').appendNode('dependency')
				hashedDep.appendNode('groupId', 'org.quiltmc')
				hashedDep.appendNode('artifactId', 'hashed')

				def id = configurations.hashed.getResolvedConfiguration().getResolvedArtifacts().iterator().next().getId().getComponentIdentifier()
				def version = id.toString().replace("SNAPSHOT:", "")
				version = version.substring(version.lastIndexOf(":") + 1)
				hashedDep.appendNode('version', version)
			}
		}
	}
	repositories {
		if (ENV.MAVEN_URL) {
			maven {
				url ENV.MAVEN_URL
				credentials {
					username ENV.MAVEN_USERNAME
					password ENV.MAVEN_PASSWORD
				}
			}
		} else if (USE_SNAPSHOT_HASHES && ENV.SNAPSHOTS_URL) {
			maven {
				url = ENV.SNAPSHOTS_URL

				credentials {
					username = ENV.SNAPSHOTS_USERNAME
					password = ENV.SNAPSHOTS_PASSWORD
				}
			}
		}
		mavenLocal()
	}
}
