package quilt.internal;

import org.gradle.api.GradleException;
import org.gradle.api.Plugin;
import org.gradle.api.Project;
import org.gradle.api.file.Directory;
import org.gradle.api.file.RegularFile;
import org.gradle.api.provider.Provider;
import org.gradle.api.tasks.TaskContainer;
import org.jetbrains.annotations.NotNull;
import quilt.internal.tasks.EnigmaProfileConsumingTask;
import quilt.internal.tasks.build.AddProposedMappingsTask;
import quilt.internal.tasks.build.BuildMappingsTinyTask;
import quilt.internal.tasks.build.CompressTinyTask;
import quilt.internal.tasks.build.DropInvalidMappingsTask;
import quilt.internal.tasks.build.GeneratePackageInfoMappingsTask;
import quilt.internal.tasks.build.InvertPerVersionMappingsTask;
import quilt.internal.tasks.build.MergeIntermediaryTask;
import quilt.internal.tasks.build.MergeTinyTask;
import quilt.internal.tasks.build.MergeTinyV2Task;
import quilt.internal.tasks.build.RemoveIntermediaryTask;
import quilt.internal.tasks.build.TinyJarTask;
import quilt.internal.tasks.diff.CheckTargetVersionExistsTask;
import quilt.internal.tasks.diff.CheckUnpickVersionsMatchTask;
import quilt.internal.tasks.diff.DownloadTargetMappingJarTask;
import quilt.internal.tasks.diff.RemapTargetMinecraftJarTask;
import quilt.internal.tasks.jarmapping.MapNamedJarTask;
import quilt.internal.tasks.jarmapping.MapPerVersionMappingsJarTask;
import quilt.internal.tasks.lint.DownloadDictionaryFileTask;
import quilt.internal.tasks.lint.FindDuplicateMappingFilesTask;
import quilt.internal.tasks.lint.MappingLintTask;
import quilt.internal.tasks.setup.CheckIntermediaryMappingsTask;
import quilt.internal.tasks.setup.DownloadIntermediaryMappingsTask;
import quilt.internal.tasks.setup.DownloadMappingsTask;
import quilt.internal.tasks.setup.DownloadMinecraftJarsTask;
import quilt.internal.tasks.setup.DownloadMinecraftLibrariesTask;
import quilt.internal.tasks.setup.DownloadVersionsManifestTask;
import quilt.internal.tasks.setup.DownloadWantedVersionManifestTask;
import quilt.internal.tasks.setup.ExtractServerJarTask;
import quilt.internal.tasks.setup.ExtractTinyMappingsTask;
import quilt.internal.tasks.setup.MergeJarsTask;
import quilt.internal.tasks.unpick.CombineUnpickDefinitionsTask;
import quilt.internal.tasks.unpick.RemapUnpickDefinitionsTask;
import quilt.internal.tasks.unpick.gen.OpenGlConstantUnpickGeneratorTask;

import java.io.File;

import static quilt.internal.util.ProviderUtil.provideProjectDir;

// TODO extract common providers, possibly convert FileConstants to providers instead of files
public abstract class MappingsPlugin implements Plugin<Project> {
    public static final String INSERT_AUTO_GENERATED_MAPPINGS_TASK_NAME = "insertAutoGeneratedMappings";
    public static final String DOWNLOAD_PER_VERSION_MAPPINGS_TASK_NAME = "downloadPerVersionMappings";
    public static final String EXTRACT_TINY_PER_VERSION_MAPPINGS_TASK_NAME = "extractTinyPerVersionMappings";
    public static final String EXTRACT_TINY_INTERMEDIARY_MAPPINGS_TASK_NAME = "extractTinyIntermediaryMappings";

    public static Provider<RegularFile> provideMappingsDestFile(
        Provider<Directory> destDir, String mappingsName, String fileExt
    ) {
        return destDir.map(dir -> dir.file(Constants.MINECRAFT_VERSION + "-" + mappingsName + "." + fileExt));
    }

    @Override
    public void apply(@NotNull Project project) {
        final var ext = project.getExtensions().create("mappings", MappingsExtension.class, project);

        final TaskContainer tasks = project.getTasks();

        final Provider<Directory> mappingsDestDir =
            provideProjectDir(project, ext.getFileConstants().cacheFilesMinecraft);

        tasks.withType(EnigmaProfileConsumingTask.class).configureEach(task ->
            task.getEnigmaProfile().convention(ext.enigmaProfile)
        );

        // provide an informative error message if no profile is specified
        ext.getEnigmaProfileFile().convention(() -> {
            throw new GradleException(
                "No enigma profile specified. " +
                    "A profile must be specified to use an EnigmaProfileConsumingTask."
            );
        });

        final var downloadVersionsManifest = tasks.register(
            DownloadVersionsManifestTask.TASK_NAME, DownloadVersionsManifestTask.class,
            task -> {
                task.getManifestFile().convention(() -> new File(
                    ext.getFileConstants().cacheFilesMinecraft,
                    "version_manifest_v2.json"
                ));
            }
        );

        final var downloadWantedVersionManifest = tasks.register(
            DownloadWantedVersionManifestTask.TASK_NAME, DownloadWantedVersionManifestTask.class,
            task -> {
                task.getManifest().convention(
                    downloadVersionsManifest.flatMap(DownloadVersionsManifestTask::getManifestFile)
                );

                task.getVersionFile().convention(() ->
                    new File(ext.getFileConstants().cacheFilesMinecraft, Constants.MINECRAFT_VERSION + ".json")
                );
            }
        );

        final var downloadMinecraftJars = tasks.register(
            DownloadMinecraftJarsTask.TASK_NAME, DownloadMinecraftJarsTask.class,
            task -> {
                task.getVersionFile().convention(
                    downloadWantedVersionManifest.flatMap(DownloadWantedVersionManifestTask::getVersionFile)
                );

                task.getClientJar().convention(() -> new File(
                    ext.getFileConstants().cacheFilesMinecraft,
                    Constants.MINECRAFT_VERSION + "-client.jar"
                ));
                task.getServerBootstrapJar().convention(() -> new File(
                    ext.getFileConstants().cacheFilesMinecraft,
                    Constants.MINECRAFT_VERSION + "-server-bootstrap.jar"
                ));
            }
        );

        final var extractServerJarTask = tasks.register(
            ExtractServerJarTask.TASK_NAME, ExtractServerJarTask.class,
            task -> {
                task.getServerBootstrapJar().convention(
                    downloadMinecraftJars.flatMap(DownloadMinecraftJarsTask::getServerBootstrapJar)
                );

                task.getServerJar().convention(() -> new File(
                    ext.getFileConstants().cacheFilesMinecraft,
                    Constants.MINECRAFT_VERSION + "-server.jar"
                ));
            }
        );

        tasks.register(MergeJarsTask.TASK_NAME, MergeJarsTask.class, task -> {
            task.getClientJar().convention(downloadMinecraftJars.get().getClientJar());
            task.getServerJar().convention(extractServerJarTask.flatMap(ExtractServerJarTask::getServerJar));

            // TODO see if output jars like this can all go in a directory (build/minecraftJars/?)
            task.getMergedFile().convention(() -> project.file(Constants.MINECRAFT_VERSION + "-merged.jar"));
        });
        final var downloadMinecraftLibraries = tasks.register(
            DownloadMinecraftLibrariesTask.TASK_NAME, DownloadMinecraftLibrariesTask.class,
            task -> {
                task.getVersionFile().convention(
                    downloadWantedVersionManifest.flatMap(DownloadWantedVersionManifestTask::getVersionFile)
                );
                task.getLibrariesDir().convention(provideProjectDir(project, ext.getFileConstants().libraries));
            }
        );

        final var downloadPerVersionMappings = tasks.register(
            DOWNLOAD_PER_VERSION_MAPPINGS_TASK_NAME, DownloadMappingsTask.class,
            task -> {
                task.getMappingsConfiguration().convention(
                    project.getConfigurations().named(Constants.PER_VERSION_MAPPINGS_NAME)
                );
                task.getJarFile().convention(
                    provideMappingsDestFile(mappingsDestDir, Constants.PER_VERSION_MAPPINGS_NAME, "jar")
                );
            }
        );
        tasks.register(
            EXTRACT_TINY_PER_VERSION_MAPPINGS_TASK_NAME, ExtractTinyMappingsTask.class,
            task -> {
                task.getJarFile().convention(downloadPerVersionMappings.flatMap(DownloadMappingsTask::getJarFile));
                task.getTinyFile().convention(
                    provideMappingsDestFile(mappingsDestDir, Constants.PER_VERSION_MAPPINGS_NAME, "tiny")
                );
            }
        );
        final var invertPerVersionMappings =
            tasks.register(InvertPerVersionMappingsTask.TASK_NAME, InvertPerVersionMappingsTask.class);
        final var buildMappingsTiny = tasks.register(BuildMappingsTinyTask.TASK_NAME, BuildMappingsTinyTask.class);
        final var insertAutoGeneratedMappings = tasks.register(
            INSERT_AUTO_GENERATED_MAPPINGS_TASK_NAME, AddProposedMappingsTask.class,
            task -> {
                // TODO eliminate this
                task.dependsOn(downloadPerVersionMappings);

                task.getInputJar().convention(() -> ext.getFileConstants().perVersionMappingsJar);

                task.getInputMappings().convention(buildMappingsTiny.flatMap(BuildMappingsTinyTask::getOutputMappings));

                task.getOutputMappings().convention(() ->
                    new File(ext.getFileConstants().buildDir, INSERT_AUTO_GENERATED_MAPPINGS_TASK_NAME + ".tiny")
            );
        });

        tasks.register(
            MergeTinyTask.TASK_NAME, MergeTinyTask.class,
            task -> {
                task.getInput().convention(buildMappingsTiny.flatMap(BuildMappingsTinyTask::getOutputMappings));

                task.getHashedTinyMappings().convention(
                    invertPerVersionMappings.flatMap(InvertPerVersionMappingsTask::getInvertedTinyFile)
                );

                task.getOutputMappings().convention(() -> new File(ext.getFileConstants().buildDir, "mappings.tiny"));
            }
        );
        final var mergeTinyV2 = tasks.register(MergeTinyV2Task.TASK_NAME, MergeTinyV2Task.class, task -> {
            // TODO eliminate this
            task.dependsOn("v2UnmergedMappingsJar");

            task.getInput().convention(
                insertAutoGeneratedMappings.flatMap(AddProposedMappingsTask::getOutputMappings)
            );

            task.getHashedTinyMappings().convention(
                invertPerVersionMappings.flatMap(InvertPerVersionMappingsTask::getInvertedTinyFile)
            );

            task.getOutputMappings().convention(() -> new File(ext.getFileConstants().buildDir, "merged2.tiny"));
        });
        tasks.register(TinyJarTask.TASK_NAME, TinyJarTask.class);
        tasks.register(CompressTinyTask.TASK_NAME, CompressTinyTask.class);
        tasks.register(DropInvalidMappingsTask.TASK_NAME, DropInvalidMappingsTask.class);

        tasks.register(MapPerVersionMappingsJarTask.TASK_NAME, MapPerVersionMappingsJarTask.class);
        tasks.register(MapNamedJarTask.TASK_NAME, MapNamedJarTask.class);

        tasks.register(CombineUnpickDefinitionsTask.TASK_NAME, CombineUnpickDefinitionsTask.class);
        tasks.register(RemapUnpickDefinitionsTask.TASK_NAME, RemapUnpickDefinitionsTask.class);
        tasks.register(OpenGlConstantUnpickGeneratorTask.TASK_NAME, OpenGlConstantUnpickGeneratorTask.class, task -> {
            // TODO eliminate this
            task.dependsOn(MapPerVersionMappingsJarTask.TASK_NAME);

            task.getVersionFile()
                .convention(downloadMinecraftLibraries.flatMap(DownloadMinecraftLibrariesTask::getVersionFile));

            task.getPerVersionMappingsJar().convention(() -> ext.getFileConstants().perVersionMappingsJar);

            // TODO make sure this works even after MapPerVersionMappingsJarTask is updated
            task.getArtifactsByUrl()
                .convention(downloadMinecraftLibraries.flatMap(downloadTask -> downloadTask.artifactsByUrl));

            task.getUnpickGlStateManagerDefinitions().convention(() ->
                ext.getFileConstants().unpickGlStateManagerDefinitions
            );

            task.getUnpickGlDefinitions().convention(() -> ext.getFileConstants().unpickGlDefinitions);
        });

        tasks.register(GeneratePackageInfoMappingsTask.TASK_NAME, GeneratePackageInfoMappingsTask.class);
        tasks.register(DownloadDictionaryFileTask.TASK_NAME, DownloadDictionaryFileTask.class);
        final var mappingLint = tasks.register(MappingLintTask.TASK_NAME, MappingLintTask.class);
        tasks.register(FindDuplicateMappingFilesTask.TASK_NAME, FindDuplicateMappingFilesTask.class,
            task -> {
                task.getMappingDirectory().convention(mappingLint.get().getMappingDirectory());
                mappingLint.get().dependsOn(task);
            }
        );

        final var checkIntermediaryMappings =
            tasks.register(CheckIntermediaryMappingsTask.TASK_NAME, CheckIntermediaryMappingsTask.class);
        final var downloadIntermediaryMappings = tasks.register(
            DownloadIntermediaryMappingsTask.TASK_NAME, DownloadIntermediaryMappingsTask.class,
            task -> {
                task.getMappingsConfiguration().convention(
                    project.getConfigurations().named(Constants.INTERMEDIARY_MAPPINGS_NAME)
                );
                task.getJarFile().convention(
                    provideMappingsDestFile(mappingsDestDir, Constants.INTERMEDIARY_MAPPINGS_NAME, "jar")
                );

                task.dependsOn(checkIntermediaryMappings);
                task.onlyIf(unused -> checkIntermediaryMappings.get().isPresent());
            }
        );
        final var extractTinyIntermediaryMappings = tasks.register(
            EXTRACT_TINY_INTERMEDIARY_MAPPINGS_TASK_NAME, ExtractTinyMappingsTask.class,
            task -> {
                task.getJarFile().convention(downloadIntermediaryMappings.flatMap(DownloadMappingsTask::getJarFile));
                task.getTinyFile().convention(
                    provideMappingsDestFile(mappingsDestDir, Constants.INTERMEDIARY_MAPPINGS_NAME, "tiny")
                );
            }
        );
        tasks.register(
            MergeIntermediaryTask.TASK_NAME, MergeIntermediaryTask.class,
            task -> {
                task.onlyIf(unused -> checkIntermediaryMappings.get().isPresent());

                task.getInput().convention(
                    extractTinyIntermediaryMappings.flatMap(ExtractTinyMappingsTask::getTinyFile)
                );

                task.getMergedTinyMappings().convention(mergeTinyV2.flatMap(MergeTinyV2Task::getOutputMappings));

                task.getOutputMappings().convention(() ->
                    new File(ext.getFileConstants().buildDir, "mappings-intermediaryMerged.tiny")
                );
            }
        );
        tasks.register(RemoveIntermediaryTask.TASK_NAME, RemoveIntermediaryTask.class);

        tasks.register(CheckTargetVersionExistsTask.TASK_NAME, CheckTargetVersionExistsTask.class);
        tasks.register(DownloadTargetMappingJarTask.TASK_NAME, DownloadTargetMappingJarTask.class);
        tasks.register(CheckUnpickVersionsMatchTask.TASK_NAME, CheckUnpickVersionsMatchTask.class);
        tasks.register(RemapTargetMinecraftJarTask.TASK_NAME, RemapTargetMinecraftJarTask.class);
    }
}
