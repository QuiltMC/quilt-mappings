CLASS net/minecraft/unmapped/C_jgxjjhjn net/minecraft/util/path/SymlinkValidator
	FIELD f_svrtftfg allowedSymlinkMatcher Ljava/nio/file/PathMatcher;
	METHOD m_euykifgm validateDirectory (Ljava/nio/file/Path;Z)Ljava/util/List;
		COMMENT Validates a directory.
		COMMENT <p>
		COMMENT If {@code validateContents} is true, then the directory's contents (but not the directory itself!) is inspected
		COMMENT for forbidden symlinks. Pass {@code true} if you don't care if the passed directory is a symlink elsewhere,
		COMMENT but do care about the contents of the directory being safe. For example, Minecraft doesn't care if a world
		COMMENT folder is a symlink elsewhere, but the contents of the world cannot contain forbidden symlinks.
		COMMENT <p>
		COMMENT If you only want to verify whether the directory itself is an allowed symlink, pass {@code false}.
		COMMENT
		COMMENT @param dir the dir to validate
		COMMENT @param validateContents whether to validate the contents of the directory, or the directory itself.
		COMMENT @return any forbidden symlinks
		ARG 1 dir
		ARG 2 validateContents
	METHOD m_plelqbgv validateSymlink (Ljava/nio/file/Path;Ljava/util/List;)V
		ARG 1 symlink
		ARG 2 foundForbiddenLinks
	METHOD m_wxpdofaa validateDirectoryContents (Ljava/nio/file/Path;Ljava/util/List;)V
		ARG 1 dir
		ARG 2 foundForbiddenLinks
	METHOD m_ztjbybov validateSymlink (Ljava/nio/file/Path;)Ljava/util/List;
		ARG 1 symlink
	CLASS C_redzjhyo
		METHOD m_snezytsc validateSymlink (Ljava/nio/file/Path;Ljava/nio/file/attribute/BasicFileAttributes;)V
			ARG 1 path
			ARG 2 attributes
		METHOD preVisitDirectory (Ljava/lang/Object;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;
			ARG 1 path
			ARG 2 attributes
		METHOD visitFile (Ljava/lang/Object;Ljava/nio/file/attribute/BasicFileAttributes;)Ljava/nio/file/FileVisitResult;
			ARG 1 path
			ARG 2 attributes
