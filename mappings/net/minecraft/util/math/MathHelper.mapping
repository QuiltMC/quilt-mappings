CLASS net/minecraft/unmapped/C_zixxccpz net/minecraft/util/math/MathHelper
	FIELD f_aagynfpl HALF_PI F
	FIELD f_ahheqpek COSINE_TABLE [D
	FIELD f_bbjrhpni SINE_TABLE [F
	FIELD f_cgkhmabm TAU F
		COMMENT Tau is equal to {@code 2 * PI}.
	FIELD f_epdlalic SQUARE_ROOT_OF_TWO F
	FIELD f_fjonprbm DEGREES_PER_RADIAN F
	FIELD f_guljspkd HALF_PI_RADIANS_SINE_TABLE_INDEX J
	FIELD f_hfvbnwgz PI F
	FIELD f_jqanuoui RADIANS_PER_DEGREE F
	FIELD f_mxcnpunf RANDOM Ljava/util/Random;
	FIELD f_mxnykavc ARCSINE_TABLE [D
	FIELD f_oakzbdjq DEGREES_TO_SINE_TABLE_INDEX F
	FIELD f_sfgcztyi SMALLEST_FRACTION_FREE_DOUBLE D
	FIELD f_tkznoipn EPSILON F
	FIELD f_vtrgxqkk MULTIPLY_DE_BRUIJN_BIT_POSITION [I
	METHOD m_adgwrpyb clampedLerp (DDD)D
		ARG 0 start
		ARG 2 end
		ARG 4 delta
	METHOD m_adgwrpyb clampedLerp (FFF)F
		ARG 0 start
		ARG 1 end
		ARG 2 delta
	METHOD m_aiwjwbjb ([F)V
		ARG 0 sineTable
	METHOD m_amokznoe hsvToRgb (FFF)I
		ARG 0 hue
		ARG 1 saturation
		ARG 2 value
	METHOD m_arnaasad absMax (DD)D
		ARG 0 a
		ARG 2 b
	METHOD m_awhmzviq lerp3 (DDDDDDDDDDD)D
		COMMENT A three-dimensional lerp between values on the 8 corners of the unit cube. Arbitrary values are specified for the corners and the output is interpolated between them.
		ARG 0 deltaX
			COMMENT the x-coordinate on the unit cube
		ARG 2 deltaY
			COMMENT the y-coordinate on the unit cube
		ARG 4 deltaZ
			COMMENT the z-coordinate on the unit cube
		ARG 6 x0y0z0
			COMMENT the output if {@code deltaX} is 0, {@code deltaY} is 0 and {@code deltaZ} is 0
		ARG 8 x1y0z0
			COMMENT the output if {@code deltaX} is 1, {@code deltaY} is 0 and {@code deltaZ} is 0
		ARG 10 x0y1z0
			COMMENT the output if {@code deltaX} is 0, {@code deltaY} is 1 and {@code deltaZ} is 0
		ARG 12 x1y1z0
			COMMENT the output if {@code deltaX} is 1, {@code deltaY} is 1 and {@code deltaZ} is 0
		ARG 14 x0y0z1
			COMMENT the output if {@code deltaX} is 0, {@code deltaY} is 0 and {@code deltaZ} is 1
		ARG 16 x1y0z1
			COMMENT the output if {@code deltaX} is 1, {@code deltaY} is 0 and {@code deltaZ} is 1
		ARG 18 x0y1z1
			COMMENT the output if {@code deltaX} is 0, {@code deltaY} is 1 and {@code deltaZ} is 1
		ARG 20 x1y1z1
			COMMENT the output if {@code deltaX} is 1, {@code deltaY} is 1 and {@code deltaZ} is 1
	METHOD m_bxflejye wrap (FF)F
		ARG 0 value
		ARG 1 maxDeviation
	METHOD m_cfepseci log2DeBruijn (I)I
		ARG 0 value
	METHOD m_csyxcbqr nextDouble (Ljava/util/Random;DD)D
		ARG 0 random
		ARG 1 min
		ARG 3 max
	METHOD m_dguetump average ([J)D
		ARG 0 array
	METHOD m_dnhnhecd clamp (BBB)B
		ARG 0 value
		ARG 1 min
		ARG 2 max
	METHOD m_dnhnhecd clamp (DDD)D
		ARG 0 value
		ARG 2 min
		ARG 4 max
	METHOD m_dnhnhecd clamp (FFF)F
		ARG 0 value
		ARG 1 min
		ARG 2 max
	METHOD m_dnhnhecd clamp (III)I
		ARG 0 value
		ARG 1 min
		ARG 2 max
	METHOD m_dnhnhecd clamp (JJJ)J
		ARG 0 value
		ARG 2 min
		ARG 4 max
	METHOD m_dnujxdgk lfloor (D)J
		ARG 0 value
	METHOD m_dzlziarc atan2 (DD)D
		ARG 0 y
		ARG 2 x
	METHOD m_ecbfmbxm absFloor (D)I
		ARG 0 value
	METHOD m_evtwqdpg floor (D)I
		ARG 0 value
	METHOD m_evtwqdpg floor (F)I
		ARG 0 value
	METHOD m_fqsbjgzu lerpAngleDegrees (FFF)F
		ARG 0 delta
		ARG 1 start
		ARG 2 end
	METHOD m_gamssdup getCumulativeDistribution ([D)[D
		ARG 0 values
	METHOD m_ggfzwusm packRgb (FFF)I
		ARG 0 r
		ARG 1 g
		ARG 2 b
	METHOD m_ggfzwusm packRgb (III)I
		ARG 0 r
		ARG 1 g
		ARG 2 b
	METHOD m_goyvqnju fwrapDegrees (D)F
		ARG 0 degrees
	METHOD m_grpmznxo parseInt (Ljava/lang/String;I)I
		ARG 0 string
		ARG 1 fallback
	METHOD m_grpmznxo parseInt (Ljava/lang/String;II)I
		ARG 0 string
		ARG 1 fallback
		ARG 2 min
	METHOD m_guzqoxaq cos (F)F
		ARG 0 value
	METHOD m_hljeodsc approximatelyEquals (DD)Z
		ARG 0 a
		ARG 2 b
	METHOD m_hljeodsc approximatelyEquals (FF)Z
		ARG 0 a
		ARG 1 b
	METHOD m_hrgzwebk ceil (D)I
		ARG 0 value
	METHOD m_hrgzwebk ceil (F)I
		ARG 0 value
	METHOD m_hzvlllcu floorDiv (II)I
		ARG 0 dividend
		ARG 1 divisor
	METHOD m_ijghmmqg lerp (DDD)D
		ARG 0 delta
		ARG 2 start
		ARG 4 end
	METHOD m_ijghmmqg lerp (FFF)F
		ARG 0 delta
		ARG 1 start
		ARG 2 end
	METHOD m_iorqbgnr nextBetween (Ljava/util/Random;II)I
		COMMENT {@return a random, uniformly distributed integer value in {@code
		COMMENT [min, max]}}
		COMMENT
		COMMENT @throws IllegalArgumentException if the range is empty (i.e. {@code
		COMMENT max < min})
		ARG 0 random
		ARG 1 min
			COMMENT the minimum value, inclusive
		ARG 2 max
			COMMENT the maximum value, inclusive
	METHOD m_jgchzcvg fastInverseCbrt (F)F
		ARG 0 x
	METHOD m_jqhdefgx magnitude (IDI)D
		ARG 0 x
		ARG 1 y
		ARG 3 z
	METHOD m_kjwfbjst isPowerOfTwo (I)Z
		ARG 0 value
	METHOD m_kufvvyme subtractAngles (FF)F
		ARG 0 start
		ARG 1 end
	METHOD m_lcsypdrr log2 (I)I
		ARG 0 value
	METHOD m_okrtatla wrapDegrees (D)D
		COMMENT Wraps an angle in degrees to the interval {@code [-180, 180)}.
		ARG 0 degrees
	METHOD m_okrtatla wrapDegrees (F)F
		COMMENT Wraps an angle in degrees to the interval {@code [-180, 180)}.
		ARG 0 degrees
	METHOD m_okrtatla wrapDegrees (I)I
		COMMENT Wraps an angle in degrees to the interval {@code [-180, 180)}.
		ARG 0 degrees
	METHOD m_omenzxei abs (F)F
		ARG 0 value
	METHOD m_omenzxei abs (I)I
		ARG 0 value
	METHOD m_pemgkpus nextInt (Ljava/util/Random;II)I
		COMMENT {@return a random, uniformly distributed integer value in {@code
		COMMENT [min, max]} If the range is empty (i.e. {@code max < min}), it
		COMMENT returns {@code min}.}
		ARG 0 random
		ARG 1 min
			COMMENT the minimum value, inclusive
		ARG 2 max
			COMMENT the maximum value, inclusive
	METHOD m_ppwmlvvd perlinFade (D)D
		ARG 0 value
	METHOD m_qdgzhywt nextFloat (Ljava/util/Random;FF)F
		ARG 0 random
		ARG 1 min
		ARG 2 max
	METHOD m_rkpilzxw sin (F)F
		ARG 0 value
	METHOD m_rmmvfwbr randomUuid ()Ljava/util/UUID;
	METHOD m_rmmvfwbr randomUuid (Ljava/util/Random;)Ljava/util/UUID;
		ARG 0 random
	METHOD m_rzlcfjhk hashCode (III)J
		ARG 0 x
		ARG 1 y
		ARG 2 z
	METHOD m_rzlcfjhk hashCode (Lnet/minecraft/unmapped/C_hhqtviec;)J
		ARG 0 vec
	METHOD m_suusolky nextGaussian (Ljava/util/Random;FF)F
		ARG 0 random
		ARG 1 mean
		ARG 2 deviation
	METHOD m_svmbzdot stepAngleTowards (FFF)F
		COMMENT Steps from {@code from} degrees towards {@code to} degrees, changing the value by at most {@code step} degrees.
		ARG 0 from
		ARG 1 to
		ARG 2 step
	METHOD m_tuuxznei sqrt (F)F
		ARG 0 value
	METHOD m_tyjbmlzw binarySearch (IILjava/util/function/IntPredicate;)I
		ARG 0 start
		ARG 1 end
		ARG 2 leftPredicate
	METHOD m_uiilhlvh floorMod (DD)D
		ARG 0 dividend
		ARG 2 divisor
	METHOD m_uiilhlvh floorMod (FF)F
		ARG 0 dividend
		ARG 1 divisor
	METHOD m_uiilhlvh floorMod (II)I
		ARG 0 dividend
		ARG 1 divisor
	METHOD m_uijcwisa roundUpToMultiple (II)I
		COMMENT Returns a value farther than or as far as {@code value} from zero that
		COMMENT is a multiple of {@code divisor}.
		ARG 0 value
		ARG 1 divisor
	METHOD m_ulhsyzvp square (D)D
		ARG 0 n
	METHOD m_ulhsyzvp square (F)F
		ARG 0 n
	METHOD m_ulhsyzvp square (I)I
		ARG 0 n
	METHOD m_uluxtcnq angleBetween (FF)F
		ARG 0 first
		ARG 1 second
	METHOD m_vodtdfqq nextBetween (Ljava/util/Random;FF)F
		ARG 0 random
		ARG 1 min
		ARG 2 max
	METHOD m_vogsgplz lerpAngle (FFF)F
		ARG 0 start
		ARG 1 end
		ARG 2 delta
	METHOD m_vtkaxkdt idealHash (I)I
		ARG 0 value
	METHOD m_vtkaxkdt murmurHash (J)J
		ARG 0 value
	METHOD m_vykvssuw perlinFadeDerivative (D)D
		ARG 0 value
	METHOD m_wgdtbyif multiplyColors (IFFF)I
		ARG 0 color
		ARG 1 r
		ARG 2 g
		ARG 3 b
	METHOD m_wgdtbyif multiplyColors (II)I
		ARG 0 a
		ARG 1 b
	METHOD m_wiyoqmog sign (D)I
		ARG 0 value
	METHOD m_wjkaqwzw parseDouble (Ljava/lang/String;D)D
		ARG 0 string
		ARG 1 fallback
	METHOD m_wjkaqwzw parseDouble (Ljava/lang/String;DD)D
		ARG 0 string
		ARG 1 fallback
		ARG 3 min
	METHOD m_wqazxhkq fastInverseSqrt (D)D
		ARG 0 x
	METHOD m_wqazxhkq fastInverseSqrt (F)F
		ARG 0 x
	METHOD m_wqbnrjbk fastFloor (D)I
		ARG 0 value
	METHOD m_xhhvsgis stepTowards (FFF)F
		COMMENT Steps from {@code from} towards {@code to}, changing the value by at most {@code step}.
		ARG 0 from
		ARG 1 to
		ARG 2 step
	METHOD m_xnzzxwqh fractionalPart (D)D
		ARG 0 value
	METHOD m_xnzzxwqh fractionalPart (F)F
		ARG 0 value
	METHOD m_yldobatm lerp2 (DDDDDD)D
		COMMENT A two-dimensional lerp between values on the 4 corners of the unit square. Arbitrary values are specified for the corners and the output is interpolated between them.
		ARG 0 deltaX
			COMMENT the x-coordinate on the unit square
		ARG 2 deltaY
			COMMENT the y-coordinate on the unit square
		ARG 4 x0y0
			COMMENT the output if {@code deltaX} is 0 and {@code deltaY} is 0
		ARG 6 x1y0
			COMMENT the output if {@code deltaX} is 1 and {@code deltaY} is 0
		ARG 8 x0y1
			COMMENT the output if {@code deltaX} is 0 and {@code deltaY} is 1
		ARG 10 x1y1
			COMMENT the output if {@code deltaX} is 1 and {@code deltaY} is 1
	METHOD m_zbiysqfs smallestEncompassingPowerOfTwo (I)I
		ARG 0 value
	METHOD m_znnaxjjr stepUnwrappedAngleTowards (FFF)F
		COMMENT Steps from {@code from} degrees towards {@code to} degrees, changing the value by at most {@code step} degrees.
		COMMENT
		COMMENT <p>This method does not wrap the resulting angle, so {@link #stepAngleTowards(float, float, float)} should be used in preference.
		ARG 0 from
		ARG 1 to
		ARG 2 step
